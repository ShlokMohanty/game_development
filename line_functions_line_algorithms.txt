we select a single endpoint coordinate position using the glVertex func just we did for the point position .
we enclose a list of glVertex functions between the glBegin/glEnd  pair  glBegin function that interprets a list 
of positions as the endpoint coordinates for the line segments.
there are three symbolic constants that we can use to specify how a list of endpoint positions should 
be connected to form a set of strainght line segments .
By default each symbolic constant display solid, white lines.
a set of straight line segments between each successive pair of end points in a list generated using the primitive
line constant GL_LINES. nothing is diaplayed if only one end point is specified , and the last endpoint is not 
processed if the number of endpoints listed is odd.
5 coordinate positions , labeled p1 through p5, and each is represented as a 2D array , then the code 
generate the display :

glBegin(GL_LINES);
glVertex2iv (p1);
glVertex2iv (p2);
glVertex2iv (p3);
glVertex2iv (p4);
glVertex2iv (p5);
glEnd();

using the same five coordinate positions as in the previous example , we obtain the display  with the code :

glBegin(GL_LINE_STRIP);
glVertex2iv (p1);
glVertex2iv (p2);
glVertex2iv (p3);
glVertex2iv (p4);
glVertex2iv (p5);
glEnd();


for a closed polyline :
glBegin(GL_LINE_LOOP);
glVertex2iv (p1);
glVertex2iv (p2);
glVertex2iv (p3);
glVertex2iv (p4);
glVertex2iv (p5);
glEnd();

DDA :
based on calculating delta x or delta y 
line sampled at unit intervals in one coordinate and the corresponding integer values nearest the line path are determined for the other coordinate.

consider a line with a positive slope , if slope is less than or equal to 1, we sample 
at unit x intervals (delta(x)=1) and compute successive y value as :
if m <= 1 we sample at unit x intervals 
y(k+1) = y(k) + m 

line with positive slope greater than 1.0, we reverse the roles of x and y .
we sample at unit y intervals(delta(y)=1) and calculate consecutive x values as :
x(k+1) = x(k) + 1/m
processing from left endpoint to the right endpoint.
when reversed , starting end point is at the right , then either we have delta(x), then either we have delta(x)=-1 and :
 y(k+1) = y(k) - m 
 or when the slope is greater than 1 we have delta(y)=-1 with :
 x(k+1) = x(k) - 1/m
 similar calculations are carried out to determine pixel positions along a line with the negative 
 slope if the absolute value horizontal and vertical differences between the endpoint positions 
 are assigned to the parameters dx and dy.
 if |delta(x)| > |delta(y)| and x0 is less than xEnd ,the values for the increments in the x and y 
 directions are 1 and m , respectively .
 if the greater range is in the x direction , but x0 is greater than xEnd, the the decrements -1 and -m used to generate each new point on the line.Otherwise , use a unit increment(or decrement) in the y direction and an x increment (or decrement) of 1/m.
 improving the DDA algorithm :
separating the increments m and 1/m into int and fractional parts so that all calculations are reduced to int integers.
